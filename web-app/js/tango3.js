// Generated by CoffeeScript 1.6.2
(function() {
  var WindowHandler, WindowProvider, log, test,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  yepnope({
    load: ['lib/zepto.min.js', 'css/tango3.css'],
    complete: function() {
      return $(document).ready(function() {
        return test();
      });
    }
  });

  log = function() {
    var arr, item, _i, _len;

    arr = [];
    for (_i = 0, _len = arguments.length; _i < _len; _i++) {
      item = arguments[_i];
      arr.push(item);
    }
    return console.log.apply(console, arr);
  };

  test = function() {
    var TestProvider, div, provider, win;

    TestProvider = (function(_super) {
      __extends(TestProvider, _super);

      function TestProvider() {
        var i, _i;

        this.lines = [];
        for (i = _i = 0; _i < 20; i = ++_i) {
          this.lines.push("Line no " + i);
        }
      }

      TestProvider.prototype.size = function() {
        return this.lines.length;
      };

      TestProvider.prototype.get = function(index) {
        return this.lines[index];
      };

      return TestProvider;

    })(WindowProvider);
    provider = new TestProvider();
    win = new WindowHandler();
    div = $(document.createElement('div')).attr('id', 'testWin');
    div.appendTo(document.body);
    div.append(win.init(provider));
    log('Win created');
    return setTimeout(function() {
      return win.refresh();
    }, 0);
  };

  WindowProvider = (function() {
    function WindowProvider() {}

    WindowProvider.prototype.size = function() {
      return 0;
    };

    WindowProvider.prototype.get = function(index) {
      return '';
    };

    return WindowProvider;

  })();

  WindowHandler = (function() {
    function WindowHandler() {}

    WindowHandler.prototype.init = function(provider) {
      var div;

      this.provider = provider;
      div = $(document.createElement('div')).addClass('win root');
      this.lines = $(document.createElement('div')).addClass('win lines').appendTo(div);
      this.scroll = $(document.createElement('div')).addClass('win scroll').appendTo(div);
      this.selected = 0;
      this.lineDivs = [];
      return div;
    };

    WindowHandler.prototype.editLine = function(index, position) {
      var div;

      if (position == null) {
        position = -1;
      }
      div = this.lineDivs[index];
      return div.attr('contentEditable', true);
    };

    WindowHandler.prototype.renderLine = function(index, prepend) {
      var div, line,
        _this = this;

      if (prepend == null) {
        prepend = false;
      }
      line = this.provider.get(index);
      div = $(document.createElement('div')).addClass('win line');
      if (prepend) {
        this.lines.prepend(div);
        this.lineDivs.unshift(div);
      } else {
        this.lines.append(div);
        this.lineDivs.push(div);
      }
      div.text(line);
      div.on('mousedown', function() {
        return _this.editLine(index);
      });
      div.on('blur', function() {
        div.text(div.text());
        return log('Blured');
      });
      return div.on('focus', function() {
        return log('Focus');
      });
    };

    WindowHandler.prototype.refresh = function() {
      var i, _i, _ref, _results;

      log('Refresh', this.lines.height());
      _results = [];
      for (i = _i = 0, _ref = this.provider.size(); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push(this.renderLine(i, false));
      }
      return _results;
    };

    return WindowHandler;

  })();

}).call(this);
